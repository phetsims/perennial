#!/bin/bash

###
# Bash script to run node/tsx tasks. This is an alternative layer to using grunt. It works by searching for tasks within
# the `js/grunt/tasks` directory of the current project or the `chipper` project.
#
# @author Sam Reid (PhET Interactive Simulations)
#


# Get the directory where the script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

TSX_EXEC="$SCRIPT_DIR/../node_modules/.bin/tsx"

# Define an array of base directories to search for task scripts
BASE_DIRS=(
  "./js/grunt/tasks"
  "../chipper/js/grunt/tasks"
)

# Function to display error messages and exit
error_exit() {
  echo "$1" >&2
  exit 1
}

# Function to execute a script with tsx
execute_script() {
  local script_path="$1"
  shift
  "$TSX_EXEC" "$script_path" "$@"
}

# Check if the first argument is missing or starts with a hyphen (indicating options)
if [[ -z "$1" || "$1" =~ ^- ]]; then
  TASK="default"
else
  TASK="$1"
  shift
fi

# Handle the 'run' directive
if [[ "$TASK" == "run" ]]; then
  if [[ -z "$1" ]]; then
    error_exit "No script file specified for 'run' directive."
  fi

  SCRIPT_FILE="$1"
  shift

  # Check if the script file has a .js or .ts extension
  if [[ ! "$SCRIPT_FILE" =~ \.(js|ts)$ ]]; then
    error_exit "Script file must have a .js or .ts extension."
  fi

  # If the script path is not absolute, resolve it relative to current directory
  if [[ ! "$SCRIPT_FILE" = /* ]]; then
    SCRIPT_FILE="./$SCRIPT_FILE"
  fi

  # Check if the script file exists
  if [[ ! -f "$SCRIPT_FILE" ]]; then
    error_exit "Script file not found: $SCRIPT_FILE"
  fi

  # Execute the script with tsx
  execute_script "$SCRIPT_FILE" "$@"
  exit 0
fi

# Initialize variables to store the found script file and its path
FOUND_SCRIPT=""
FOUND_PATH=""

# Iterate over each base directory to find the task script
for BASE_DIR in "${BASE_DIRS[@]}"; do
  TS_SCRIPT_FILE="$BASE_DIR/${TASK}.ts"
  JS_SCRIPT_FILE="$BASE_DIR/${TASK}.js"

  if [[ -f "$TS_SCRIPT_FILE" ]]; then
    FOUND_SCRIPT="$TS_SCRIPT_FILE"
    FOUND_PATH="$BASE_DIR"
    break
  elif [[ -f "$JS_SCRIPT_FILE" ]]; then
    FOUND_SCRIPT="$JS_SCRIPT_FILE"
    FOUND_PATH="$BASE_DIR"
    break
  fi
done

# Execute the found script or display an error if not found
if [[ -n "$FOUND_SCRIPT" ]]; then
  # echo "Executing task '$TASK' from '$FOUND_PATH'"
  execute_script "$FOUND_SCRIPT" "$@"
else
  error_exit "Unknown command or script file not found: $TASK"
fi