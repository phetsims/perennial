// Copyright 2024, University of Colorado Boulder
/**
 * Type checks *.ts files.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import { spawn } from 'child_process';
import fs from 'fs';
import _ from 'lodash';
import fixEOL from '../common/fixEOL.js';
import { Repo } from '../common/PerennialTypes.js';

const PERENNIAL_ROOT = `${__dirname}/../..`;
const ALL_CONFIG_PATH = `${PERENNIAL_ROOT}/../chipper/dist/tsconfig/all/`;

type CheckOptions = {
  repo: Repo;
  all: boolean;
  clean: boolean;
  pretty: boolean;
};

const check = async ( providedOptions?: Partial<CheckOptions> ): Promise<void> => {
  const options = _.assignIn( {
    repo: 'perennial', // TODO: I hate this default, https://github.com/phetsims/chipper/issues/1487
    all: false,
    clean: false,
    pretty: true
  }, providedOptions );

  if ( options.all ) {
    writeAllTSConfigFile();
  }

  const cwd = options.all ? ALL_CONFIG_PATH : `${PERENNIAL_ROOT}/../${options.repo}`;
  // TODO: should be in perennial https://github.com/phetsims/perennial/issues/364
  const tscRunnable = options.all ? '../../../../chipper/node_modules/typescript/bin/tsc'
                                         : '../chipper/node_modules/typescript/bin/tsc';

  if ( options.clean ) {
    // TODO: Keep these as 'node'? https://github.com/phetsims/chipper/issues/1481
    await runCommand( 'node', [ tscRunnable, '-b', '--clean' ], cwd );
  }

  await runCommand( 'node', [ tscRunnable, '-b', '--pretty', options.pretty + '' ], cwd );
};

// Utility function to spawn a child process with inherited stdio
const runCommand = ( command: string, args: string[], cwd: string ): Promise<void> => {
  return new Promise( ( resolve, reject ) => {
    const child = spawn( command, args, {
      cwd: cwd,
      stdio: 'inherit', // Inherit stdio to preserve colors and interactive output
      shell: process.platform.startsWith( 'win' )
    } );

    child.on( 'error', error => reject( error ) );
    child.on( 'close', code => {
      if ( code !== 0 ) { reject( new Error( `Command "${command} ${args.join( ' ' )}" exited with code ${code}` ) ); }
      else { resolve(); }
    } );
  } );
};

/**
 * Write an aggregate tsconfig file that checks all entry points.
 */
function writeAllTSConfigFile(): void {
  const activeRepos = fs.readFileSync( `${PERENNIAL_ROOT}/data/active-repos`, 'utf-8' ).trim().split( /\r?\n/ ).map( s => s.trim() );

  const filteredRepos = activeRepos.filter( repo => {
    return fs.existsSync( `${PERENNIAL_ROOT}/../${repo}/tsconfig.json` ) &&
           repo !== 'phet-lib' && // TODO: include this repo, see https://github.com/phetsims/phet-lib/issues/7
           repo !== 'phet-vite-demo'; // TODO: include this repo, see https://github.com/phetsims/phet-vite-demo/issues/2
  } );

  const json = {
    references: filteredRepos.map( repo => ( { path: `../../../../${repo}` } ) )
  };

  const fileOutput = `/**
 * File auto-generated by check.ts 
 *
 * Explicitly list all entry points that we want to type check.
 * Imported images/mipmaps/sounds are still type checked.
 * This structure was determined in https://github.com/phetsims/chipper/issues/1245
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */
${JSON.stringify( json, null, 2 )}`;

  fs.mkdirSync( ALL_CONFIG_PATH, { recursive: true } ); // Silent no-op if it already exists.
  fs.writeFileSync( ALL_CONFIG_PATH + 'tsconfig.json', fixEOL( fileOutput ) );
}

export default check;